import React, { useState } from 'react';
import { 
  Search, 
  Play, 
  Settings, 
  Globe, 
  Shield, 
  Zap,
  AlertTriangle,
  CheckCircle,
  Clock,
  Brain
} from 'lucide-react';
import { ScanResult, ScanTarget } from '../types/vulnerability';
import { simulateVulnerabilityScan } from '../utils/scanEngine';

interface VulnerabilityScannerProps {
  onScanComplete: (results: ScanResult[]) => void;
  onScanStart: () => void;
  isScanning: boolean;
}

const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({
  onScanComplete,
  onScanStart,
  isScanning
}) => {
  const [scanTarget, setScanTarget] = useState<ScanTarget>({
    url: '',
    scanType: 'quick',
    selectedCategories: []
  });
  const [scanProgress, setScanProgress] = useState(0);
  const [currentScanStep, setCurrentScanStep] = useState('');

  const owaspCategories = [
    { id: 'A01', name: 'Broken Access Control', enabled: true },
    { id: 'A02', name: 'Cryptographic Failures', enabled: true },
    { id: 'A03', name: 'Injection', enabled: true },
    { id: 'A04', name: 'Insecure Design', enabled: true },
    { id: 'A05', name: 'Security Misconfiguration', enabled: true },
    { id: 'A06', name: 'Vulnerable Components', enabled: true },
    { id: 'A07', name: 'Authentication Failures', enabled: true },
    { id: 'A08', name: 'Software and Data Integrity', enabled: true },
    { id: 'A09', name: 'Security Logging Failures', enabled: true },
    { id: 'A10', name: 'Server-Side Request Forgery', enabled: true },
  ];

  const handleScan = async () => {
    if (!scanTarget.url) return;

    onScanStart();
    setScanProgress(0);
    
    // Simulate scanning progress
    const steps = [
      'Initializing scan engine...',
      'Crawling target application...',
      'Analyzing authentication mechanisms...',
      'Testing for injection vulnerabilities...',
      'Checking access controls...',
      'Scanning for known vulnerabilities...',
      'AI analysis in progress...',
      'Generating recommendations...',
      'Compiling final report...'
    ];

    for (let i = 0; i < steps.length; i++) {
      setCurrentScanStep(steps[i]);
      setScanProgress(((i + 1) / steps.length) * 100);
      await new Promise(resolve => setTimeout(resolve, 800));
    }

    // Simulate vulnerability discovery
    const results = await simulateVulnerabilityScan(scanTarget);
    onScanComplete(results);
    setScanProgress(100);
    setCurrentScanStep('Scan completed successfully!');
  };

  const toggleCategory = (categoryId: string) => {
    setScanTarget(prev => ({
      ...prev,
      selectedCategories: prev.selectedCategories.includes(categoryId)
        ? prev.selectedCategories.filter(id => id !== categoryId)
        : [...prev.selectedCategories, categoryId]
    }));
  };

  return (
    <div className="space-y-8">
      {/* Scanner Header */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-slate-900">Vulnerability Scanner</h2>
            <p className="text-slate-600">AI-powered security assessment with OWASP Top 10 coverage</p>
          </div>
          <div className="flex items-center space-x-2 bg-purple-100 px-4 py-2 rounded-lg">
            <Brain className="h-5 w-5 text-purple-600" />
            <span className="text-sm font-medium text-purple-700">AI Enhanced</span>
          </div>
        </div>

        {/* Target Configuration */}
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-slate-700 mb-2">
              Target URL
            </label>
            <div className="relative">
              <Globe className="absolute left-3 top-3 h-5 w-5 text-slate-400" />
              <input
                type="url"
                value={scanTarget.url}
                onChange={(e) => setScanTarget(prev => ({ ...prev, url: e.target.value }))}
                placeholder="https://example.com"
                className="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={isScanning}
              />
            </div>
            <p className="text-xs text-slate-500 mt-1">
              ⚠️ Only scan applications you own or have explicit permission to test
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-slate-700 mb-2">
              Scan Type
            </label>
            <div className="grid grid-cols-3 gap-4">
              {[
                { id: 'quick', name: 'Quick Scan', duration: '2-5 min', description: 'Basic vulnerability check' },
                { id: 'deep', name: 'Deep Scan', duration: '10-20 min', description: 'Comprehensive analysis' },
                { id: 'comprehensive', name: 'Full Audit', duration: '30-60 min', description: 'Complete OWASP coverage' }
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => setScanTarget(prev => ({ ...prev, scanType: type.id as any }))}
                  className={`p-4 rounded-lg border-2 transition-all ${
                    scanTarget.scanType === type.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-slate-200 hover:border-slate-300'
                  }`}
                  disabled={isScanning}
                >
                  <div className="text-sm font-medium text-slate-900">{type.name}</div>
                  <div className="text-xs text-slate-500 mt-1">{type.duration}</div>
                  <div className="text-xs text-slate-600 mt-1">{type.description}</div>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* OWASP Categories Selection */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-slate-900">OWASP Top 10 Categories</h3>
          <button
            onClick={() => {
              const allSelected = owaspCategories.every(cat => scanTarget.selectedCategories.includes(cat.id));
              setScanTarget(prev => ({
                ...prev,
                selectedCategories: allSelected ? [] : owaspCategories.map(cat => cat.id)
              }));
            }}
            className="text-sm text-blue-600 hover:text-blue-700 font-medium"
            disabled={isScanning}
          >
            {owaspCategories.every(cat => scanTarget.selectedCategories.includes(cat.id)) ? 'Deselect All' : 'Select All'}
          </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {owaspCategories.map((category) => (
            <div
              key={category.id}
              onClick={() => toggleCategory(category.id)}
              className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                scanTarget.selectedCategories.includes(category.id)
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-slate-200 hover:border-slate-300'
              } ${isScanning ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm font-medium text-slate-900">{category.id}</div>
                  <div className="text-sm text-slate-600">{category.name}</div>
                </div>
                {scanTarget.selectedCategories.includes(category.id) && (
                  <CheckCircle className="h-5 w-5 text-blue-600" />
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Scan Controls */}
      <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-slate-900">Scan Controls</h3>
            <p className="text-slate-600">Start your security assessment</p>
          </div>
          <button
            onClick={handleScan}
            disabled={!scanTarget.url || isScanning}
            className={`px-6 py-3 rounded-lg font-semibold flex items-center space-x-2 transition-all ${
              !scanTarget.url || isScanning
                ? 'bg-slate-100 text-slate-400 cursor-not-allowed'
                : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:from-blue-700 hover:to-purple-700'
            }`}
          >
            {isScanning ? (
              <>
                <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full"></div>
                <span>Scanning...</span>
              </>
            ) : (
              <>
                <Play className="h-5 w-5" />
                <span>Start Scan</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* Scan Progress */}
      {isScanning && (
        <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-slate-900">Scan Progress</h3>
            <div className="text-sm text-slate-600">{Math.round(scanProgress)}% Complete</div>
          </div>
          
          <div className="w-full bg-slate-200 rounded-full h-2 mb-4">
            <div
              className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${scanProgress}%` }}
            ></div>
          </div>
          
          <div className="flex items-center space-x-2 text-sm text-slate-600">
            <div className="animate-pulse">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
            </div>
            <span>{currentScanStep}</span>
          </div>
        </div>
      )}

      {/* Scan Guidelines */}
      <div className="bg-amber-50 border border-amber-200 rounded-xl p-6">
        <div className="flex items-start space-x-3">
          <AlertTriangle className="h-6 w-6 text-amber-600 mt-1" />
          <div>
            <h4 className="font-semibold text-amber-900 mb-2">Ethical Scanning Guidelines</h4>
            <ul className="text-sm text-amber-800 space-y-1">
              <li>• Only scan applications you own or have explicit written permission to test</li>
              <li>• Respect rate limits and avoid causing service disruption</li>
              <li>• Follow responsible disclosure practices for any vulnerabilities found</li>
              <li>• Use sandbox environments for testing whenever possible</li>
              <li>• Comply with all applicable laws and regulations</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityScanner;